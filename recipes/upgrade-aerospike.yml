- name: Upgrading Aerospike
  hosts: "aerospike_cluster"
  serial: 1
  gather_facts: true
  become: yes
  vars:
    sleep_time_for_wait_statements: 5
    client_tend_time: 60
  tasks:
  - name: Get service facts
    service_facts:

  - name: Import configuration properties
    include_vars: 
      dir: ../vars      

  - name: Install new Aerospike version
    block: 
    - name: Check whether download exists
      stat:
       path: "{{ download_path }}"
      register: stat_download_path

    - name: Download Aerospike {{ 'Enterprise' if enterprise else 'Community' }}, version = {{ aerospike_version }}, distribution = {{ aerospike_distribution }} if not already downloaded
      get_url:
       url: "{{ download_url }}"
       dest: "{{ download_path }}"
      when: not stat_download_path.stat.exists 

    - name: Unpack installer
      unarchive:
       remote_src: "yes"
       src: "{{ download_path }}"
       dest: "{{ download_file_dir }}"
       list_files: true
      register: result

    - name: Get install directory
      set_fact:
       install_directory: "{{ result.files[0] }}"

    - name: "Install Aerospike"
      command:
        chdir: "{{ download_file_dir }}/{{ install_directory }}"
        cmd: "{{ download_file_dir }}/{{ install_directory }}/asinstall"

  - block:   
    - name: Get Aerospike version
      shell: |
        asadm -e summary | grep "Server Version" | tr -d " "   | awk 'BEGIN{FS=":"}{print $2}'
      register: asversion

    - name: Show Aerospike version
      debug:
        msg: "Aerospike version : {{ asversion.stdout_lines[0] }}"

    - name: Quiesce, wait for proxying to finish, restart, wait for cluster stable
      shell: |
        # Record current migrate-max-num-incoming value
        MIG_MAX=$(asinfo -v 'get-config:context=service' -l | grep migrate-max-num-incoming | awk 'BEGIN{FS="="}{print $2}')      
        # Temporarily stop migrations
        asadm -e "asinfo -v 'set-config:context=service;migrate-max-num-incoming=0'"
        # Quiesce
        asinfo -v 'quiesce:'
        asadm -e "asinfo -v 'recluster:'"
        # Wait for all clients to re-tend (get latest partition table )
        sleep {{ client_tend_time }}        
        # Wait for proxying to reduce to zero
        while [[ ! ($(asinfo -v 'statistics' -l | grep proxy_in_progress | awk 'BEGIN{FS="="}{print $2}') == 0) ]]
        do
          sleep {{ sleep_time_for_wait_statements }}
        done
        # Restart service
        service aerospike restart
        # Wait for cluster-stable
        while [[ $(asinfo -v 'cluster-stable:') =~ ^ERROR ]]
        do 
          sleep {{ sleep_time_for_wait_statements }}
        done
        # Restore migrate-max-num-incoming
        asadm -e "asinfo -v 'set-config:context=service;migrate-max-num-incoming=$MIG_MAX'"

    - name: Get Aerospike version
      shell: |
        asadm -e summary | grep "Server Version" | tr -d " "   | awk 'BEGIN{FS=":"}{print $2}'
      register: asversion

    - name: Installation complete message
      debug: 
        msg: "Aerospike install complete for {{ inventory_hostname }} - running {{ asversion.stdout_lines[0] }}"

    when: hostvars[inventory_hostname].services[aerospike_service_name] is defined

